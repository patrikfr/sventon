package de.berlios.sventon.ctrl;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.tmatesoft.svn.core.wc.ISVNAnnotateHandler;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * BlameHandler.
 * <p/>
 * Container class to store blame lines as they are generated by the JavaSVN
 * annotate function.
 *
 * @author patrikfr@users.berlios.de
 */
public class BlameHandler implements ISVNAnnotateHandler {

  protected final Log logger = LogFactory.getLog(getClass());

  private final List<BlameLine> blameLines = new ArrayList<BlameLine>();

  private StringBuilder blameContent = new StringBuilder();
  private boolean isContentColorized = false;

  /**
   * Blame line handler.
   *
   * @param date     The line's last changed date.
   * @param revision The line's last changed revision.
   * @param author   The line's author.
   * @param line     The acutal line.
   */
  public void handleLine(Date date, long revision, String author, String line) {
    BlameLine blameLine = new BlameLine(date, revision, author);
    if (logger.isDebugEnabled()) {
      logger.debug("Added blame line: " + blameLine);
    }
    blameLines.add(blameLine);
    blameContent.append(line);
    blameContent.append("\n");
  }

  /**
   * Get all the blame lines collected as a list.
   *
   * @return Collected blame lines.
   */
  public final List<BlameLine> getBlameLines() {
    return blameLines;
  }

  /**
   * Colorizes content.
   * 
   * @param colorer  The <code>Colorer</code> instance to use.
   * @param filename Filename, used for choosing formatter.
   * @throws IllegalStateException if content already colorized.
   */
  public void colorizeContent(final Colorer colorer, final String filename) {
    if (isContentColorized) {
      throw new IllegalStateException("Blame content already colorized.");
    }
    blameContent = new StringBuilder(colorer.getColorizedContent(blameContent.toString(),
        filename));
    isContentColorized = true;
  }

  /**
   * Gets the blame content.
   * If <code>colorizeContent</code> has been executed the
   * content returned may be colorized and contain line numbers,
   * depenting on the file format.
   *
   * @return The content.
   */
  public String getBlameContent() {
    return blameContent.toString();
  }

  public String toString() {
    return "BlameHandler[blameLines=" + blameLines + "]";
  }

}
